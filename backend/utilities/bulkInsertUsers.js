// This file insert users from a csv file containing
// name,profBoardName,licenceNumber

const path = require('path');
const csvjson = require('csvjson');
const fs = require('fs');
const { DateTime } = require('luxon');
const sqlite3 = require('sqlite3').verbose();

const toLowercaseAndNormalForm = (str)=> {
  return str.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
};

const filename = process.argv[2];
if (!filename){
  console.log('missing argument (file name)');
  console.log('Usage: copy team file to this folder and execute:');
  console.log('node ./bulkInsertUsers filename.csv');
  console.log('first line of filename.csv must be: `name,profBoardName,licenceNumber`');
  console.log('and the rest of the file should follow this same format');
  process.exit(1);
}

const data = fs.readFileSync(path.join(__dirname, filename), { encoding : 'utf8'});
var options = {
  delimiter : ',', 
};
let teamData = csvjson.toObject(data, options);

const db = new sqlite3.Database('../collect.sqlite');
// add username for each user
const team = teamData.map(u => {
  const userNameParts = u.name.split(' ');
  let username;
  if (userNameParts.length > 1){
    username = toLowercaseAndNormalForm(userNameParts[0] + 
      '.' + userNameParts[userNameParts.length - 1] );
  }else{
    username = u.name + Math.random().toString(16).substr(2, 8);
  }
  return {...u,username};
});

// check for collision on autogenerated usernames
function checkForCollisions(db,team){
  return new Promise((resolve,reject)=>{
    db.all('SELECT username FROM users',(e,l)=>{
      if (e) {
        reject(e);
      } else {
        let usernames = l.map(u=>{return u.username;});
        const teamnames = team.map(u=>{return u.username;});
        usernames = [...usernames, ...teamnames];
        const collisions = usernames.filter(((el,idx,names)=>{
          return (names.indexOf(el) != idx);
        }));
        if(collisions.length > 0){
          console.log('there are some autogenerated usernames collisions');
          console.log('fix the following users` names');
          console.log(collisions);
          reject('collisions detected');
        } else {
          resolve('done');
        }
      }
    });
  });
}

function insertTeam(db,team){
  const now = DateTime.utc().toFormat('yyyy-LL-dd HH:mm:ss.SSS ZZ');
  return new Promise((resolve,reject)=>{
    team.forEach(u =>{
      db.run(`INSERT INTO users(
    name,
    email,
    phone,
    username,
    password,
    isAdmin,
    isListingEnabled,
    isLoginEnabled,
    changePassword,
    profBoardName,
    licenceNumber,
    createdAt,
    updatedAt)
    VALUES(
    '${u.name}',
    '',
    '',
    '${u.username}',
    'password',
    0,
    1,
    0,
    0,
    '${u.profBoardName}',
    '${u.licenceNumber}',
    '${now}',
    '${now}')`, function(err) {
        if (err) {
          reject(err.message);
        } else {
          resolve();
        }
      });
    });
  });
}

async function mainLogic(db,team){
  try{
    await checkForCollisions(db,team);
    console.log('no collisions');
    // at this point we are sure that there are no collisions
    await insertTeam(db,team);
    db.close();
  }
  catch(e){
    console.log(e);
    process.exit(1);
  }
}

mainLogic(db,team);




